{
  ".source.python": {
    "Create New Odoo Object": {
      "prefix": "oo_new_module",
      "body": "# -*- encoding: utf-8 -*-\n# Â© 2019 Marcel Savegnago, ID42 Sistemas\n# License AGPL-3.0 or later (http://www.gnu.org/licenses/agpl.html).\n\nfrom odoo import api, fields, models\n\n\nclass ${10:NewModule}(models.Model):\n\t_name = '${20:module.name}'\n\t_rec_name = '${30:module.rec_name}' # optional\n\t_description = '${40:Module description}'\n\t_order = '${50:field1}, ${60:field2}, ' # optional\n\n\tname = fields.Char()$70"
    },
    "Inherit/Extend Existing Odoo Object": {
      "prefix": "oo_object_inherit",
      "body": "class ${10:NewModule}(models.Model):\n\t_name = '${20:module.name}' # optional\n\t_inherit = '${30:module.name}'\n\n\tname = fields.Char()$40"
    },
    "Integer Field": {
      "prefix": "oo_field_integer",
      "body": "${5:new_field} = fields.Integer(string=\"${10:Field name}\", )"
    },
    "Float Field": {
      "prefix": "oo_field_float",
      "body": "${5:new_field} = fields.Float(string=\"${10:Field name}\", )"
    },
    "Char Field": {
      "prefix": "oo_field_char",
      "body": "${5:new_field} = fields.Char(string=\"${10:Field name}\", )"
    },
    "Text Field": {
      "prefix": "oo_field_text",
      "body": "${5:new_field} = fields.Text(string=\"${10:Field name}\", )"
    },
    "Many2one Field": {
      "prefix": "oo_field_many2one",
      "body": "${10:new_field_id} = fields.Many2one(\n\tstring=\"${20:Field name}\",\n\tcomodel_name=\"${30:res.partner}\",\n\tdomain=\"[('${40:field}', '${41:=}', ${42:other})]\",\n\tcontext={\"${50:key}\": ${51:\"value\"}\\},\n\tondelete=\"${60:set null}\",\n\thelp=\"${70:Explain your field}.\",\n)$80"
    },
    "One2many Field": {
      "prefix": "oo_field_one2many",
      "body": "${10:new_field_ids} = fields.One2many(\n\tstring=\"${20:Field name}\",\n\tcomodel_name=\"${30:res.partner}\",\n\tinverse_name=\"${40:inverse_name_id}\",\n\tdomain=\"[('${50:field}', '${51:=}', ${52:other})]\",\n\tcontext={\"${60:key}\": ${61:\"value\"}\\},\n\thelp=\"${70:Explain your field}.\",\n)$80"
    },
    "Many2many Field": {
      "prefix": "oo_field_many2many",
      "body": "${10:new_field_ids} = fields.Many2many(\n\tstring=\"${20:Field name}\",\n\tcomodel_name=\"${30:res.partner}\",\n\trelation=\"${40:relation_table_name}\",\n\tcolumn1=\"${50:column_this}\",\n\tcolumn2=\"${60:column_other}\",\n\tdomain=\"[('${70:field}', '${71:=}', ${72:other})]\",\n\tcontext={\"${80:key}\": ${81:\"value\"}\\},\n\thelp=\"${90:Explain your field}.\",\n)$100"
    },
    "Boolean Field": {
      "prefix": "oo_field_boolean",
      "body": "${5:is_new_field} = fields.Boolean(string=\"${10:Field name}\", )"
    },
    "HTML Field": {
      "prefix": "oo_field_html",
      "body": "${5:new_field} = fields.HTML(string=\"${10:Field name}\", )"
    },
    "Date Field": {
      "prefix": "oo_field_date",
      "body": "${5:new_field} = fields.Date(string=\"${10:Field name}\", )"
    },
    "DateTime Field": {
      "prefix": "oo_field_datetime",
      "body": "${5:new_field} = fields.Datetime(string=\"${10:Field name}\", )"
    },
    "Selection Field": {
      "prefix": "oo_field_selection",
      "body": "${5:new_field} = fields.Selection(\n\tstring=\"${10:Field name}\",\n\tselection=[\n\t\t\t('${20:value1}', '${21:description1}'),\n\t\t\t('${30:value2}', '${31:description2}'),\n\t],$40\n)$50"
    },
    "Binary Field": {
      "prefix": "oo_field_binary",
      "body": "${5:new_field} = fields.Binary(string=\"${10:Field name}\", )"
    },
    "Search": {
      "prefix": "oo_search",
      "body": "self.search([('$1', '=', $2), ...], offset=0, limit=None, order=None, count=False)"
    },
    "Name search": {
      "prefix": "oo_search_name",
      "body": "self.name_search(name='$1', args=None, operator='ilike', limit=100)"
    },
    "Compute method": {
      "prefix": "oo_method_compute",
      "body": "@api.multi\n@api.depends(\"${10:field1}\", \"${20:field2}\", )\ndef _compute_${30:field}(self):\n\tfor s in self:\n\t\t${40:pass}"
    },
    "Onchange method": {
      "prefix": "oo_onchange_method",
      "body": "@api.onchange(\"${10:field1}\", \"${20:field2}\", )\ndef _onchange_${30:field}(self):\n\tvals = {}\n\n\t# Remove warning if necessary\n\tvals['warning'] = {\n\t\t'title': _('$40')\n\t\t'message': _('$50')\n\t}\n\n\t# Remove domain if necessary\n\tvals['domain'] = {\n\t\t\"${60:field}\": [(\"$61\", \"${62:=}\", ${63:value})],\n\t}\n\n\treturn vals$70"
    },
    "Constrains method": {
      "prefix": "oo_constrains_method",
      "body": "@api.multi\n@api.constrains(\"${10:field1}\", \"${20:field2}\", )\ndef _check_${30:field}(self):\n\tfor s in self:\n\t\tif s.${40:field} == ${50:value}:\n\t\t\traise ValidationError(_(\"$60\"))$70"
    },
    "Compute field": {
      "prefix": "odoo_field_compute",
      "body": "${10:new_field} = fields.${20:Float}(\n\tstring=\"${30:Field string}\",\n\tcompute='_compute_${10:new_field}',\n\tinverse='_inverse_${10:new_field}',\n\tsearch='_search_${10:new_field}',\n\thelp=\"$50\",\n)\n\n@api.multi\n@api.depends(\"${60:field1}\", \"${70:field2}\", )\ndef _compute_${10:new_field}(self):\n\tfor s in self:\n\t\t${80:pass}\n\n@api.multi\ndef _inverse_${10:new_field}(self):\n\tfor s in self:\n\t\t${90:pass}\n\n@api.multi\ndef _search_${10:new_field}(self, operator, value):\n\tif operator == 'like':\n\t\toperator = 'ilike'\n\treturn [('${100:new_field}', operator, value)]}"
    }
  }
}